-- Supabase schema for polls and votes
-- Run this in the Supabase SQL editor or apply as a migration.

-- Extensions
create extension if not exists "pgcrypto";

-- Profiles: optional user profile data
create table if not exists public.profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  display_name text,
  created_at timestamptz not null default now()
);

alter table public.profiles enable row level security;

-- Policies: drop if exists (CREATE POLICY doesn't support IF NOT EXISTS on PG 15)
drop policy if exists "profiles_select_public" on public.profiles;
create policy "profiles_select_public"
  on public.profiles for select
  using (true);

drop policy if exists "profiles_insert_own" on public.profiles;
create policy "profiles_insert_own"
  on public.profiles for insert
  with check (auth.uid() = id);

drop policy if exists "profiles_update_own" on public.profiles;
create policy "profiles_update_own"
  on public.profiles for update
  using (auth.uid() = id)
  with check (auth.uid() = id);

-- Polls
create table if not exists public.polls (
  id uuid primary key default gen_random_uuid(),
  author_id uuid not null references auth.users(id) on delete cascade,
  question text not null,
  is_public boolean not null default true,
  created_at timestamptz not null default now()
);

create index if not exists polls_author_id_idx on public.polls(author_id);

alter table public.polls enable row level security;

-- Anyone can read public polls; authors can read their own polls
drop policy if exists "polls_select_public_or_author" on public.polls;
create policy "polls_select_public_or_author"
  on public.polls for select
  using (is_public or auth.uid() = author_id);

-- Only authenticated users can create polls; enforce author ownership
drop policy if exists "polls_insert_owner" on public.polls;
create policy "polls_insert_owner"
  on public.polls for insert
  with check (auth.uid() = author_id);

-- Only the author can update/delete their polls
drop policy if exists "polls_update_author" on public.polls;
create policy "polls_update_author"
  on public.polls for update
  using (auth.uid() = author_id)
  with check (auth.uid() = author_id);

drop policy if exists "polls_delete_author" on public.polls;
create policy "polls_delete_author"
  on public.polls for delete
  using (auth.uid() = author_id);

-- Poll options
create table if not exists public.poll_options (
  id uuid primary key default gen_random_uuid(),
  poll_id uuid not null references public.polls(id) on delete cascade,
  label text not null,
  position int generated by default as identity,
  created_at timestamptz not null default now()
);

create index if not exists poll_options_poll_id_idx on public.poll_options(poll_id);

alter table public.poll_options enable row level security;

-- Read options of public polls or own polls
drop policy if exists "poll_options_select_public_or_author" on public.poll_options;
create policy "poll_options_select_public_or_author"
  on public.poll_options for select
  using (
    exists (
      select 1 from public.polls p
      where p.id = poll_id and (p.is_public or p.author_id = auth.uid())
    )
  );

-- Only poll authors can insert/update/delete options
drop policy if exists "poll_options_cud_author" on public.poll_options;
create policy "poll_options_cud_author"
  on public.poll_options for all
  using (
    exists (
      select 1 from public.polls p
      where p.id = poll_id and p.author_id = auth.uid()
    )
  )
  with check (
    exists (
      select 1 from public.polls p
      where p.id = poll_id and p.author_id = auth.uid()
    )
  );

-- Votes
create table if not exists public.votes (
  id uuid primary key default gen_random_uuid(),
  poll_id uuid not null references public.polls(id) on delete cascade,
  option_id uuid not null references public.poll_options(id) on delete cascade,
  voter_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamptz not null default now(),
  unique (poll_id, voter_id)
);

create index if not exists votes_poll_id_idx on public.votes(poll_id);
create index if not exists votes_option_id_idx on public.votes(option_id);
create index if not exists votes_voter_id_idx on public.votes(voter_id);

alter table public.votes enable row level security;

-- Anyone can read votes for public polls; authors can read their poll votes; voters can read their own vote
drop policy if exists "votes_select_public_author_or_self" on public.votes;
create policy "votes_select_public_author_or_self"
  on public.votes for select
  using (
    voter_id = auth.uid() or
    exists (
      select 1 from public.polls p where p.id = poll_id and (p.is_public or p.author_id = auth.uid())
    )
  );

-- Only authenticated users can vote; must vote for an option that belongs to the poll
drop policy if exists "votes_insert_authenticated_once" on public.votes;
create policy "votes_insert_authenticated_once"
  on public.votes for insert
  with check (
    auth.uid() = voter_id and
    exists (
      select 1 from public.poll_options o where o.id = option_id and o.poll_id = poll_id
    )
  );

-- Allow voters to delete their own vote (optional, so they can change vote)
drop policy if exists "votes_delete_self" on public.votes;
create policy "votes_delete_self"
  on public.votes for delete
  using (voter_id = auth.uid());
